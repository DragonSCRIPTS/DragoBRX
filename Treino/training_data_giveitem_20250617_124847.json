[
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um programa que distribui espadas a cada 15 segundos para personagens no jogo.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo simples que fornece espadas para personagens sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar somente a parte que define como espadas s√£o entrega a cada 15 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero apenas a fun√ß√£o que distribui um espadas para um jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero apenas a fun√ß√£o que fornece um equipamentos para um jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer apenas a fun√ß√£o que d√° um espadas no jogo para um personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um script que fornece itens a cada 15 segundos para personagens em personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo que entrega espadas no mundo com intervalo de 15 segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar s√≥ as configura√ß√µes para distribui itens a cada quinze segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um c√≥digo para Roblox que fornece ferramentas a cada quinze segundos para players em personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero apenas a fun√ß√£o que d√° um itens para um players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar somente a parte que define como equipamentos s√£o entrega a cada quinze segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar somente a parte que define como ferramentas s√£o distribui a cada quinze segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um sistema que entrega espadas a cada quinze segundos para personagens em jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero apenas a fun√ß√£o que entrega um itens para um players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um script para Roblox que distribui espadas a cada 15 segundos para players em personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um sistema em Lua que fornece espadas no mundo a cada 15 segundos para players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar s√≥ as configura√ß√µes para fornece espadas a cada 15 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar somente a parte que define como itens s√£o fornece a cada 15 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar s√≥ as configura√ß√µes para fornece espadas a cada quinze segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema de entrega de ferramentas que entrega a cada 15 segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um c√≥digo para Roblox que entrega equipamentos a cada quinze segundos para personagens em personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que distribui itens no mundo a cada quinze segundos para players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um programa que fornece itens a cada 15 segundos para personagens no mundo.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema de entrega de itens que entrega a cada 15 segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um programa que d√° itens a cada quinze segundos para personagens em personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um programa que fornece espadas a cada quinze segundos para personagens no mundo.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema de entrega de ferramentas que fornece a cada 15 segundos para players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar somente a parte que define como equipamentos s√£o distribui a cada 15 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um c√≥digo para Roblox que d√° ferramentas a cada 15 segundos para players em jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar s√≥ as configura√ß√µes para distribui itens a cada 15 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um programa para Roblox que entrega equipamentos a cada quinze segundos para jogadores em personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um programa que distribui itens a cada 15 segundos para players no mapa.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um c√≥digo para Roblox que d√° equipamentos a cada quinze segundos para players em jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo que d√° espadas a cada 15 segundos para jogadores em jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo que d√° equipamentos no jogo com intervalo de quinze segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero apenas a fun√ß√£o que fornece um espadas para um jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um c√≥digo que fornece itens a cada 15 segundos para personagens no jogo.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo que d√° ferramentas no mundo com intervalo de quinze segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo simples que distribui espadas para players sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar s√≥ as configura√ß√µes para distribui itens a cada 15 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo simples que entrega espadas para personagens sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que d√° espadas no mapa a cada quinze segundos para personagens em posi√ß√µes rand√¥micas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar s√≥ as configura√ß√µes para entrega itens a cada quinze segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um c√≥digo para Roblox que entrega itens a cada quinze segundos para personagens em jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um c√≥digo que distribui espadas no jogo a cada quinze segundos para personagens em posi√ß√µes rand√¥micas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que d√° itens no mundo a cada 15 segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um c√≥digo para entrega espadas no mundo a cada 15 segundos para players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema de entrega de equipamentos que d√° a cada 15 segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que fornece itens a cada 15 segundos para players no jogo.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar s√≥ as configura√ß√µes para fornece ferramentas a cada quinze segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar somente a parte que define como equipamentos s√£o fornece a cada 15 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer apenas a fun√ß√£o que fornece um espadas no mapa para um personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um script que fornece ferramentas a cada 15 segundos para players no jogo.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer apenas a fun√ß√£o que fornece um ferramentas no jogo para um jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um script para entrega ferramentas no mundo a cada 15 segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar s√≥ as configura√ß√µes para fornece itens a cada quinze segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema de entrega de ferramentas que entrega a cada quinze segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um programa que distribui equipamentos no mundo a cada quinze segundos para personagens em posi√ß√µes rand√¥micas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo simples que d√° itens para players sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um c√≥digo em Lua que distribui ferramentas no mundo a cada 15 segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar somente a parte que define como ferramentas s√£o entrega a cada 15 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que d√° itens no mapa a cada quinze segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero apenas a fun√ß√£o que distribui um espadas para um players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que fornece equipamentos no mundo a cada 15 segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer apenas a fun√ß√£o que fornece um ferramentas no mapa para um personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo que fornece itens no mundo com intervalo de quinze segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um c√≥digo que distribui itens a cada quinze segundos para jogadores no mapa.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar s√≥ as configura√ß√µes para entrega itens a cada quinze segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar s√≥ as configura√ß√µes para distribui equipamentos a cada quinze segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que entrega itens no mundo a cada quinze segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo simples que distribui itens para players sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar s√≥ as configura√ß√µes para d√° espadas a cada 15 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer apenas a fun√ß√£o que fornece um espadas no jogo para um personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema de entrega de itens que d√° a cada 15 segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um c√≥digo em Lua que d√° ferramentas no mundo a cada 15 segundos para players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que entrega equipamentos no jogo a cada quinze segundos para jogadores em posi√ß√µes rand√¥micas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo simples que d√° espadas para personagens sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que distribui espadas no jogo a cada 15 segundos para players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo que distribui itens no mapa com intervalo de 15 segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que fornece espadas no jogo a cada quinze segundos para players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que distribui equipamentos no mapa a cada 15 segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um programa para Roblox que entrega ferramentas a cada 15 segundos para personagens em personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo simples que distribui ferramentas para personagens sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero apenas a fun√ß√£o que entrega um ferramentas para um jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero apenas a fun√ß√£o que fornece um equipamentos para um jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar somente a parte que define como ferramentas s√£o d√° a cada 15 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema de entrega de espadas que d√° a cada quinze segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer apenas a fun√ß√£o que distribui um itens no mapa para um jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um c√≥digo que entrega itens a cada 15 segundos para players no mundo.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um c√≥digo em Lua que distribui ferramentas no mundo a cada 15 segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um programa que entrega itens a cada 15 segundos para personagens no jogo.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que fornece itens no mapa a cada quinze segundos para jogadores em posi√ß√µes rand√¥micas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um c√≥digo para fornece espadas no mapa a cada 15 segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer apenas a fun√ß√£o que d√° um equipamentos no jogo para um personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar somente a parte que define como itens s√£o fornece a cada quinze segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um programa para fornece ferramentas no jogo a cada 15 segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema de entrega de itens que distribui a cada quinze segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que d√° itens no mundo a cada quinze segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar s√≥ as configura√ß√µes para d√° ferramentas a cada 15 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema para Roblox que fornece itens a cada 15 segundos para personagens em personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um script em Lua que d√° itens no jogo a cada 15 segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo simples que fornece equipamentos para jogadores sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema de entrega de ferramentas que entrega a cada quinze segundos para players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um c√≥digo em Lua que d√° itens no jogo a cada quinze segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um script que fornece equipamentos a cada quinze segundos para players no mapa.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um script para Roblox que entrega equipamentos a cada 15 segundos para players em personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um c√≥digo que entrega ferramentas a cada 15 segundos para jogadores no mapa.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um programa que entrega espadas no mapa a cada quinze segundos para players em posi√ß√µes aleat√≥rias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema de entrega de itens que fornece a cada quinze segundos para players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar s√≥ as configura√ß√µes para fornece equipamentos a cada quinze segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que d√° itens no jogo a cada quinze segundos para players em posi√ß√µes variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo que fornece itens no mundo com intervalo de 15 segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um programa que entrega equipamentos a cada quinze segundos para jogadores no mapa.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema para entrega itens no jogo a cada quinze segundos para players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um sistema em Lua que fornece equipamentos no mapa a cada quinze segundos para players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema de entrega de itens que d√° a cada 15 segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo simples que d√° itens para personagens sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer apenas a fun√ß√£o que fornece um espadas no jogo para um players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo que entrega itens a cada quinze segundos para jogadores em jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que d√° ferramentas no mapa a cada 15 segundos para players em posi√ß√µes rand√¥micas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo que d√° ferramentas a cada 15 segundos para players em jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um c√≥digo para Roblox que entrega itens a cada 15 segundos para personagens em personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um programa em Lua que distribui itens no mapa a cada 15 segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um c√≥digo que entrega equipamentos a cada quinze segundos para personagens no mapa.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema de entrega de espadas que fornece a cada quinze segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um programa que distribui espadas a cada 15 segundos para players no mapa.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que entrega itens no mundo a cada 15 segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um c√≥digo para Roblox que entrega itens a cada 15 segundos para jogadores em jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um c√≥digo que fornece itens no mundo a cada 15 segundos para personagens em posi√ß√µes variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um sistema que d√° espadas a cada 15 segundos para jogadores no mapa.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um programa para Roblox que distribui espadas a cada quinze segundos para players em personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo simples que fornece espadas para players sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um script que entrega equipamentos a cada 15 segundos para personagens em jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar somente a parte que define como itens s√£o entrega a cada 15 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um sistema que distribui espadas a cada 15 segundos para jogadores no mapa.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um programa em Lua que d√° itens no jogo a cada 15 segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que d√° itens no mundo a cada quinze segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer apenas a fun√ß√£o que entrega um espadas no mapa para um players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar somente a parte que define como ferramentas s√£o fornece a cada 15 segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um c√≥digo que fornece ferramentas no mapa a cada 15 segundos para jogadores em posi√ß√µes aleat√≥rias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um script que entrega espadas no jogo a cada 15 segundos para players em posi√ß√µes aleat√≥rias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer apenas a fun√ß√£o que distribui um espadas no jogo para um personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer apenas a fun√ß√£o que fornece um ferramentas no mundo para um personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um programa para distribui ferramentas no mapa a cada 15 segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um programa que d√° equipamentos a cada 15 segundos para personagens no mundo.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer apenas a fun√ß√£o que fornece um ferramentas no mapa para um jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo simples que entrega itens para personagens sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo que fornece espadas no jogo com intervalo de quinze segundos para players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um programa que entrega equipamentos a cada quinze segundos para personagens no jogo.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero apenas a fun√ß√£o que distribui um espadas para um players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero apenas a fun√ß√£o que distribui um ferramentas para um players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer apenas a fun√ß√£o que d√° um espadas no mundo para um players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema de entrega de itens que entrega a cada quinze segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um c√≥digo que entrega espadas a cada quinze segundos para jogadores no mundo.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema de entrega de equipamentos que distribui a cada quinze segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um script que fornece itens a cada quinze segundos para personagens no jogo.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um programa que distribui itens a cada 15 segundos para jogadores em personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que d√° equipamentos no mapa a cada 15 segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um script para Roblox que d√° espadas a cada 15 segundos para jogadores em jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema de entrega de equipamentos que distribui a cada quinze segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo simples que entrega itens para jogadores sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um programa para entrega espadas no jogo a cada 15 segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo simples que fornece equipamentos para personagens sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo que fornece ferramentas no mundo com intervalo de 15 segundos para players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um script que fornece ferramentas a cada 15 segundos para personagens no mundo.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero apenas a fun√ß√£o que entrega um equipamentos para um jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer apenas a fun√ß√£o que fornece um equipamentos no mapa para um personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um c√≥digo que fornece itens a cada 15 segundos para personagens no mapa.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que d√° espadas no jogo a cada 15 segundos para players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um c√≥digo em Lua que d√° espadas no mapa a cada 15 segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema de entrega de espadas que distribui a cada quinze segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar s√≥ as configura√ß√µes para fornece equipamentos a cada quinze segundos.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo simples que entrega ferramentas para players sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que fornece itens no mapa a cada quinze segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Gerar um programa que fornece equipamentos a cada quinze segundos para players no mundo.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer apenas a fun√ß√£o que entrega um espadas no jogo para um jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que entrega espadas no mapa a cada 15 segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que distribui equipamentos no mundo a cada 15 segundos para players em posi√ß√µes rand√¥micas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um programa que distribui espadas a cada quinze segundos para players em personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo simples que distribui itens para personagens sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que fornece equipamentos no mundo a cada 15 segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um c√≥digo que d√° espadas no jogo a cada 15 segundos para jogadores em posi√ß√µes aleat√≥rias.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo que entrega itens no mapa com intervalo de 15 segundos para players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um programa que fornece equipamentos no mundo a cada quinze segundos para personagens em posi√ß√µes variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que distribui espadas no jogo a cada 15 segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que entrega ferramentas no mapa a cada quinze segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que d√° espadas a cada 15 segundos para jogadores no mapa.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Criar um sistema que d√° itens no mapa a cada 15 segundos para jogadores em posi√ß√µes variadas.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo que entrega ferramentas no jogo com intervalo de quinze segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero apenas a fun√ß√£o que fornece um ferramentas para um jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero apenas a fun√ß√£o que d√° um espadas para um players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero apenas a fun√ß√£o que d√° um equipamentos para um players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = \"Sword\"\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new({'r': 1, 'g': 0, 'b': 0})\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = 10\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema de entrega de espadas que entrega a cada quinze segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo que d√° equipamentos no mapa com intervalo de 15 segundos para jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo simples que d√° equipamentos para jogadores sem loop.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema de entrega de espadas que entrega a cada quinze segundos para players.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um programa para Roblox que fornece itens a cada quinze segundos para personagens em jogadores.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Quero um c√≥digo que entrega itens no jogo com intervalo de quinze segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  },
  {
    "timestamp": "2025-06-17T12:48:47.612555",
    "source_url": "https://raw.githubusercontent.com/DragonSCRIPTS/DragoBRX/main/Par√¢metros/comand_bar",
    "prompt": "Fazer um sistema de entrega de equipamentos que d√° a cada 15 segundos para personagens.",
    "parameters": {
      "script": {
        "description": "Server-side Script for handling server logic, e.g., spawning a collectible item",
        "type": "Instance",
        "class": "Script",
        "parent": "game.ServerScriptService",
        "properties": {
          "Name": {
            "value": "ItemSpawner",
            "type": "string",
            "description": "Name of the server script"
          },
          "Source": {
            "value": "while true do\n\tlocal item = Instance.new('Part')\n\titem.Name = 'SpawnedItem'\n\titem.Size = Vector3.new(2, 2, 2)\n\titem.Position = Vector3.new(math.random(-50, 50), 5, math.random(-50, 50))\n\titem.Anchored = false\n\titem.Parent = workspace\n\twait(5)\nend",
            "type": "string",
            "description": "Lua code to spawn items randomly in the workspace every 5 seconds"
          }
        },
        "creationLocation": {
          "description": "Location where the script is created",
          "type": "Instance",
          "value": "game.ServerScriptService",
          "descriptionDetails": "Server scripts are typically placed in ServerScriptService for server-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Script",
          "descriptionDetails": "Server-side Lua script for game logic"
        }
      },
      "localScript": {
        "description": "Client-side LocalScript for handling player-specific actions, e.g., camera effects",
        "type": "Instance",
        "class": "LocalScript",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "CameraShake",
            "type": "string",
            "description": "Name of the local script"
          },
          "Source": {
            "value": "local camera = workspace.CurrentCamera\nlocal player = game.Players.LocalPlayer\nplayer.Chatted:Connect(function(msg)\n\tif msg == '/shake' then\n\t\tcamera.CameraType = Enum.CameraType.Scriptable\n\t\tfor i = 1, 10 do\n\t\t\tcamera.CFrame = camera.CFrame * CFrame.new(math.random(-0.5, 0.5), math.random(-0.5, 0.5), 0)\n\t\t\twait(0.1)\n\t\tend\n\t\tcamera.CameraType = Enum.CameraType.Custom\n\tend\nend)",
            "type": "string",
            "description": "Lua code to shake the camera when the player types '/shake' in chat"
          }
        },
        "creationLocation": {
          "description": "Location where the local script is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "Local scripts are typically placed in PlayerGui for client-side execution"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "LocalScript",
          "descriptionDetails": "Client-side Lua script for player-specific functionality"
        }
      },
      "moduleScript": {
        "description": "ModuleScript for reusable code, e.g., a utility to manage player stats",
        "type": "Instance",
        "class": "ModuleScript",
        "parent": "game.ReplicatedStorage",
        "properties": {
          "Name": {
            "value": "PlayerStats",
            "type": "string",
            "description": "Name of the module script"
          },
          "Source": {
            "value": "local Stats = {}\nStats.__index = Stats\nfunction Stats.new()\n\tlocal self = setmetatable({}, Stats)\n\tself.Health = 100\n\tself.Score = 0\n\treturn self\nend\nfunction Stats:AddScore(points)\n\tself.Score = self.Score + points\n\treturn self.Score\nend\nreturn Stats",
            "type": "string",
            "description": "Lua code defining a module to manage player health and score"
          }
        },
        "creationLocation": {
          "description": "Location where the module script is created",
          "type": "Instance",
          "value": "game.ReplicatedStorage",
          "descriptionDetails": "Module scripts are typically placed in ReplicatedStorage for shared access"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ModuleScript",
          "descriptionDetails": "Reusable Lua module for shared game logic"
        }
      },
      "screenGui": {
        "description": "ScreenGui for a simple UI with a TextButton to toggle visibility",
        "type": "Instance",
        "class": "ScreenGui",
        "parent": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
        "properties": {
          "Name": {
            "value": "MainMenu",
            "type": "string",
            "description": "Name of the ScreenGui"
          },
          "Enabled": {
            "value": true,
            "type": "boolean",
            "description": "Initial visibility state of the GUI"
          }
        },
        "creationLocation": {
          "description": "Location where the ScreenGui is created",
          "type": "Instance",
          "value": "game.Players.LocalPlayer:WaitForChild('PlayerGui')",
          "descriptionDetails": "ScreenGui is parented to PlayerGui for client-side UI"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "ScreenGui",
          "descriptionDetails": "GUI container for displaying user interfaces"
        },
        "childElements": {
          "description": "Child elements of the ScreenGui",
          "type": "table",
          "elements": [
            {
              "description": "Frame to hold UI elements",
              "type": "Instance",
              "class": "Frame",
              "parent": "screenGui",
              "properties": {
                "Name": {
                  "value": "MenuFrame",
                  "type": "string",
                  "description": "Name of the frame"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.3,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.4,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the frame"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.35,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the frame on the screen"
                },
                "BackgroundColor3": {
                  "value": {
                    "Color3": {
                      "r": 0.1,
                      "g": 0.1,
                      "b": 0.1
                    }
                  },
                  "type": "Color3",
                  "description": "Background color of the frame"
                },
                "BackgroundTransparency": {
                  "value": 0.4,
                  "type": "number",
                  "description": "Transparency of the frame"
                }
              }
            },
            {
              "description": "TextButton to toggle a game action",
              "type": "Instance",
              "class": "TextButton",
              "parent": "screenGui.MenuFrame",
              "properties": {
                "Name": {
                  "value": "ToggleButton",
                  "type": "string",
                  "description": "Name of the button"
                },
                "Size": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.5,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.3,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Size of the button"
                },
                "Position": {
                  "value": {
                    "UDim2": {
                      "x": {
                        "scale": 0.25,
                        "offset": 0
                      },
                      "y": {
                        "scale": 0.35,
                        "offset": 0
                      }
                    }
                  },
                  "type": "UDim2",
                  "description": "Position of the button within the frame"
                },
                "Text": {
                  "value": "Toggle Action",
                  "type": "string",
                  "description": "Text displayed on the button"
                },
                "TextColor3": {
                  "value": {
                    "Color3": {
                      "r": 1,
                      "g": 1,
                      "b": 1
                    }
                  },
                  "type": "Color3",
                  "description": "Text color of the button"
                }
              }
            }
          ]
        }
      },
      "part": {
        "description": "Physical Part object, e.g., a platform in the workspace",
        "type": "Instance",
        "class": "Part",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "Platform",
            "type": "string",
            "description": "Name of the part"
          },
          "Size": {
            "value": {
              "Vector3": {
                "x": 10,
                "y": 1,
                "z": 10
              }
            },
            "type": "Vector3",
            "description": "Size of the platform"
          },
          "Position": {
            "value": {
              "Vector3": {
                "x": 0,
                "y": 2,
                "z": 0
              }
            },
            "type": "Vector3",
            "description": "Position of the platform in the workspace"
          },
          "Anchored": {
            "value": true,
            "type": "boolean",
            "description": "Keeps the platform fixed in place"
          },
          "Material": {
            "value": "Concrete",
            "type": "Enum.Material",
            "description": "Material of the platform"
          },
          "Color": {
            "value": {
              "Color3": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
              }
            },
            "type": "Color3",
            "description": "Color of the platform (gray)"
          }
        },
        "creationLocation": {
          "description": "Location where the part is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Parts are typically parented to the workspace for physical objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Part",
          "descriptionDetails": "Physical object in the game world"
        }
      },
      "model": {
        "description": "Model to group objects, e.g., a simple NPC structure",
        "type": "Instance",
        "class": "Model",
        "parent": "workspace",
        "properties": {
          "Name": {
            "value": "SimpleNPC",
            "type": "string",
            "description": "Name of the model"
          }
        },
        "creationLocation": {
          "description": "Location where the model is created",
          "type": "Instance",
          "value": "workspace",
          "descriptionDetails": "Models are typically parented to the workspace for grouped objects"
        },
        "fileType": {
          "description": "Type of artifact created",
          "type": "string",
          "value": "Model",
          "descriptionDetails": "Container for grouping multiple objects like parts and humanoids"
        },
        "childElements": {
          "description": "Child elements of the model",
          "type": "table",
          "elements": [
            {
              "description": "Main part for the NPC's body",
              "type": "Instance",
              "class": "Part",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Body",
                  "type": "string",
                  "description": "Name of the NPC's body part"
                },
                "Size": {
                  "value": {
                    "Vector3": {
                      "x": 2,
                      "y": 4,
                      "z": 1
                    }
                  },
                  "type": "Vector3",
                  "description": "Size of the NPC's body"
                },
                "Position": {
                  "value": {
                    "Vector3": {
                      "x": 0,
                      "y": 4,
                      "z": 0
                    }
                  },
                  "type": "Vector3",
                  "description": "Position of the body part"
                },
                "Anchored": {
                  "value": true,
                  "type": "boolean",
                  "description": "Keeps the NPC fixed in place"
                }
              }
            },
            {
              "description": "Humanoid for NPC behavior",
              "type": "Instance",
              "class": "Humanoid",
              "parent": "model",
              "properties": {
                "Name": {
                  "value": "Humanoid",
                  "type": "string",
                  "description": "Name of the humanoid"
                },
                "WalkSpeed": {
                  "value": 0,
                  "type": "number",
                  "description": "Prevents NPC from moving"
                },
                "Health": {
                  "value": 100,
                  "type": "number",
                  "description": "Health of the NPC"
                }
              }
            }
          ]
        }
      }
    },
    "generated_lua": "--[[\n    Script: GiveItem\n    Local: ServerScriptService\n    Autor: Gerado por Script Python\n    Descri√ß√£o: D√° um item (ferramenta) a todos os jogadores a cada X segundos.\n]]\n\n-- Servi√ßos necess√°rios\nlocal Players = game:GetService(\"Players\")\n\n-- Configura√ß√µes de entrega de itens\nlocal GIVE_INTERVAL = 15 -- segundos\nlocal ITEM_NAME = \"Sword\"\nlocal ITEM_DAMAGE = 10\nlocal ITEM_COLOR = {'r': 1, 'g': 0, 'b': 0}\n\n-- Fun√ß√£o que d√° um item a um jogador\nlocal function giveItem(player)\n    if player.Character then\n        local tool = Instance.new(\"Tool\")\n        tool.Name = ITEM_NAME\n        local handle = Instance.new(\"Part\")\n        handle.Name = \"Handle\"\n        handle.BrickColor = BrickColor.new(ITEM_COLOR)\n        handle.Size = Vector3.new(1, 0.4, 4)\n        handle.Parent = tool\n        local script = Instance.new(\"Script\")\n        script.Name = \"DamageScript\"\n        script.Source = [[\n            local tool = script.Parent\n            local damage = ITEM_DAMAGE\n            tool.Activated:Connect(function()\n                local humanoid = tool.Parent:FindFirstChildOfClass('Humanoid')\n                if humanoid then\n                    humanoid:TakeDamage(damage)\n                end\n            end)\n        ]]\n        script.Parent = tool\n        tool.Parent = player.Backpack\n    end\nend\n\n-- Loop principal para dar itens a todos os jogadores\nwhile true do\n    for _, player in pairs(Players:GetPlayers()) do\n        giveItem(player)\n    end\n    wait(GIVE_INTERVAL)\nend",
    "metadata": {
      "script_name": "GiveItem",
      "location": "ServerScriptService",
      "description": "D√° um item (ferramenta) a todos os jogadores a cada X segundos no mundo."
    }
  }
]